#!/usr/bin/env python

import argparse, re, io
import numpy as np
import pynit as pn
import pynsp as pp

__version__ = pp.__version__


def main():
    parser = argparse.ArgumentParser(prog='pynsp',
                                     description="Command-line tool for PyNSP")
    parser.add_argument("-v", "--version", action='version', version ='%(prog)s v{}'.format(__version__))

    subparsers = parser.add_subparsers(title='Sub-commands',
                                       description='Something description',
                                       help='description',
                                       dest='function',
                                       metavar='command')

    seedpc = subparsers.add_parser("seedpc", help='Seed PC brain-wise correlation analysis')
    seedpc.add_argument("-i", "--input", help="input file", type=str, required=True)
    seedpc.add_argument("-t", "--template", help="template file", type=str, required=True)
    seedpc.add_argument("-a", "--atlas", help="atlas file", type=str, required=True)
    seedpc.add_argument("-d", "--indices", metavar='INDICES', nargs='*',
                        help="index of ROI", type=int, required=True)
    seedpc.add_argument("-n", "--n_voxels", metavar='NUM_of_VOXELS', help="number of Voxel to sample",
                        default=100, type=int)
    seedpc.add_argument("-l", "--iters", metavar='NUM_of_ITERATIONS', help="number of iteration",
                        default=1000, type=int)
    seedpc.add_argument("-o", "--output", help="output file", type=str, required=True)

    seed = subparsers.add_parser("seed", help='Seed-based brain-wise correlation analysis')
    seed.add_argument("-i", "--input", help="input file", type=str, required=True)
    seed.add_argument("-t", "--template", help="template file", type=str, required=True)
    seed.add_argument("-a", "--atlas", help="atlas file", type=str, required=True)
    seed.add_argument("-d", "--indices", metavar='INDICES', nargs='*',
                        help="index of ROI", type=int, required=True)
    seed.add_argument("-o", "--output", help="output file", type=str, required=True)
    # subparsers.set_defaults(func=seed)

    nuisance = subparsers.add_parser("nuisance", help='Nuisance noise regression')
    nuisance.add_argument("-i", "--input", help="input file", type=str, required=True)
    nuisance.add_argument("-m", "--mask", help="mask file", type=str, required=True)
    nuisance.add_argument("-t", "--dt", help="sampling rate", type=int, required=True)
    nuisance.add_argument("--polort", help="polynomial regressor", type=int, default=3)
    nuisance.add_argument("--ort", help="motion regressor", type=str, default=None)
    nuisance.add_argument("--alff", help="bandpass filter for ALFF calculation", nargs=2,
                          type=float, default=None)
    nuisance.add_argument("-o", "--output", help="output file", type=str, required=True)
#
    args = parser.parse_args()
    if args.function == 'seedpc':
        from pynsp.stats import seedpc2brainwise
        from pynsp.tools import io
        tmpobj = pn.Template(args.template, args.atlas)
        matrix = pn.load(args.input).get_data()
        indices = list(set(args.indices))
        for idx in indices:
            R = seedpc2brainwise(matrix, tmpobj, idx, args.n_voxels,
                                 args.iters, c_type=None)
                                 # args.iters, c_type = "Benjamini-Hochberg")
            filename = pn.methods.splitnifti(args.output)
            io.save_as(R, tmpobj, "{}_roi-{}.nii.gz".format(filename, tmpobj.label[idx][0]))

    elif args.function == 'seed':
        from pynsp.stats import seedpc2brainwise
        from pynsp.tools import io
        tmpobj = pn.Template(args.template, args.atlas)
        matrix = pn.load(args.input).get_data()
        indices = list(set(args.indices))
        for idx in indices:
            R = seedpc2brainwise(matrix, tmpobj, idx, n_voxels='Max',
                                 iters=1, n_pc=None, c_type=None)
                                 # iters=1, n_pc=None, c_type = "Benjamini-Hochberg")
            filename = pn.methods.splitnifti(args.output)
            io.save_as(R, tmpobj, "{}_roi-{}.nii.gz".format(filename, tmpobj.label[idx][0]))

    elif args.function == 'nuisance':
        from pynsp.stats import standard_denoising2brainwise as glm
        from pynsp.tools import io
        matrix = pn.load(args.input).get_data()
        maskobj = pn.load(args.mask)
        ort = pn.load(args.ort)
        output = glm(matrix, maskobj, dt=args.dt, degree=int(args.polort),
                     ort=ort, alff=args.alff)
        filename = pn.methods.splitnifti(args.output)
        print(args.alff)
        if args.alff and isinstance(args.alff, list):
            residual_matrix, freq, fft_matrix, alff_matrix, falff_matrix = output
            try:
                with open("{}_freq.txt".format(filename), 'wb') as fobj:
                    fobj.writelines(freq)
            except:
                print(freq)
            io.save_as(fft_matrix, maskobj,
                       "{}_freq.nii.gz".format(filename), temp=False)
            io.save_as(alff_matrix, maskobj,
                       "{}_ALFF.nii.gz".format(filename), temp=False)
            io.save_as(falff_matrix, maskobj,
                       "{}_fALFF.nii.gz".format(filename), temp=False)
            io.save_as(alff_matrix, maskobj,
                       "{}_ALFF.nii.gz".format(filename), temp=False)
        else:
            residual_matrix = output
        io.save_as(residual_matrix, maskobj,
                   "{}.nii.gz".format(filename), temp=False)

    else:
        pass


if __name__ == '__main__':
    main()